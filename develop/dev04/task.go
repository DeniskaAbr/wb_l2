package main

import (
	"sort"
	"strings"
)

/*
=== Поиск анаграмм по словарю ===

Напишите функцию поиска всех множеств анаграмм по словарю.
Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8.
Выходные данные: Ссылка на мапу множеств анаграмм.
Ключ - первое встретившееся в словаре слово из множества
Значение - ссылка на массив, каждый элемент которого, слово из множества. Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.

Программа должна проходить все тесты. Код должен проходить проверки go vet и golint.
*/

func Anagram(i *[]string) *map[string][]string {

	keys := make(map[string]string)   // для хранения первого слова и ключа
	list := make(map[string][]string) // для хранения групп слов

	for _, word := range *i {
		wordL := strings.ToLower(word)
		key := sortStr(wordL)

		wk, ok := keys[key]

		if !ok {
			keys[key] = wordL
			wk, _ := keys[key]
			list[wk] = append(list[wk], wordL)
		}

		if ok {
			list[wk] = append(list[wk], wordL)
		}
	}
	for k, a := range list {
		if len(a) < 2 {
			delete(list, k)
		}
		sort.Strings(a)
	}

	return &list
}

func sortStr(k string) string {
	// получаем слайс символов слова
	s := strings.Split(k, "")
	// сортируем символы в слайсе
	sort.Strings(s)
	// возвращаем слово объединяя все символы из слайса
	return strings.Join(s, "")
}

